[  {    "Name": "이동평균선",    "Source": "finance",    "Categories": [      "000020"    ],    "CollectedAt": "날짜",    "AnalysisQuery": "DROP TABLE IF EXISTS `cache`; CREATE TEMPORARY TABLE IF NOT EXISTS `cache`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`{day}일_이동평균` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3), INDEX `IDX_temporary` (`날짜`,`종가`,`temp`)) ENGINE=MEMORY AS SELECT * FROM (SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, unixtime as `날짜` FROM past_finance WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(`날짜`) ASC;SET @ema_intervals = {day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.`종가` else `cache`.`종가` * @k + @prev_ema * (1 - @k) end), `{day}일_이동평균` = temp, `날짜` = `날짜`; SELECT `{day}일_이동평균`, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `cache` ORDER BY `날짜` DESC LIMIT 1;",    "Options": {      "day": 5    },    "ScheduleTime": ""  },  {    "Name": "MACD",    "Source": "finance",    "Categories": [      "000020"    ],    "CollectedAt": "날짜",    "AnalysisQuery": "DROP TABLE IF EXISTS `cache`;CREATE TEMPORARY TABLE IF NOT EXISTS `cache`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema_short` decimal(20,2),`ema_long` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema_short`,`ema_long`)) ENGINE=MEMORY AS SELECT * FROM ( SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, null as ema_short, null as ema_long, null as temp, unixtime as `날짜` FROM past_finance WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(`날짜`) ASC; SET @ema_intervals = {short_day}; SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.`종가` else `cache`.`종가` * @k + @prev_ema * (1 - @k) end),ema_short = temp, `날짜` = `날짜`;SET @ema_intervals = {long_day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.`종가` else `cache`.`종가` * @k + @prev_ema * (1 - @k) end),ema_long = temp, `날짜` = `날짜`;DROP TABLE IF EXISTS `cache2`;CREATE TEMPORARY TABLE IF NOT EXISTS `cache2`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`macd` decimal(20,2),`macd_signal` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3)) ENGINE=MEMORY AS SELECT category, ema_short - ema_long as macd, null as macd_signal, null as temp, `날짜` FROM `cache`;SET @ema_intervals = {signal_day};SET @k = 2 / (1 + @ema_intervals);SET @prev_ema = 0;UPDATE `cache2` SET temp = @prev_ema := (case when `cache2`.idx = 1 then `cache2`.macd else `cache2`.macd * @k + @prev_ema * (1 - @k) end),macd_signal =temp, `날짜` = `날짜`;SELECT macd as macd_{short_day}_{long_day}_{signal_day}, macd_signal as macd_signal_{short_day}_{long_day}_{signal_day}, macd - macd_signal as macd_oscillator_{short_day}_{long_day}_{signal_day}, UNIX_TIMESTAMP(`날짜`) as `날짜` FROM `cache2` ORDER BY `날짜` DESC LIMIT 1;",    "Options": {      "short_day": 20,      "long_day": 40,      "signal_day": 9    },    "ScheduleTime": ""  },  {    "Name": "TRIX",    "Source": "finance",    "Categories": [      "000020"    ],    "CollectedAt": "날짜",    "AnalysisQuery": "DROP TABLE IF EXISTS `cache`;CREATE TEMPORARY TABLE IF NOT EXISTS `cache`(`idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,`category` varchar(50),`종가` varchar(50),`ema` decimal(20,2),`temp` decimal(20,2),`날짜` timestamp(3),INDEX `IDX_temporary` (`날짜`,`종가`,`temp`,`ema`)) ENGINE=MEMORY AS SELECT * FROM ( SELECT category, COLUMN_GET(`rawdata`, '종가' as char) as `종가`, null as ema, null as temp, unixtime as `날짜` FROM past_finance WHERE category ='{category}' AND COLUMN_GET(`rawdata`, '종가' as char) IS NOT NULL GROUP BY unixtime DESC) as result GROUP BY DATE(날짜) ASC; SET @ema_intervals = {trix_day}; SET @k = 2 / (1 + @ema_intervals); SET @prev_ema = 0; UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.종가 else `cache`.종가 * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.ema else `cache`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; UPDATE `cache` SET temp = @prev_ema := (case when `cache`.idx = 1 then `cache`.ema else `cache`.ema * @k + @prev_ema * (1 - @k) end), ema = temp, 날짜 = 날짜; DROP TABLE IF EXISTS `cache_2`; CREATE TEMPORARY TABLE IF NOT EXISTS `cache_2` ENGINE=MEMORY AS SELECT * FROM `cache`; SET @signal_intervals = {signal_day}; SET @k = 2 / (1 + @signal_intervals); DROP TABLE IF EXISTS `cache_3`; CREATE TEMPORARY TABLE IF NOT EXISTS `cache_3` ( `idx` INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, `category` varchar(50), `trix` decimal(8,2), `trix_signal` decimal(8,2), `temp` decimal(8,2), `날짜` timestamp(3) ) ENGINE=MEMORY AS SELECT category, 종가, trix, trix_signal, temp, 날짜 FROM ( SELECT `cache_2`.category, `cache`.종가, (`cache_2`.ema - `cache`.ema)/`cache`.ema * 10000 as trix, null as trix_signal, (`cache_2`.ema - `cache`.ema)/`cache`.ema * 10000 as temp, `cache_2`.날짜 FROM `cache`, `cache_2` WHERE `cache`.idx = `cache_2`.idx - 1) as result; UPDATE `cache_3` SET trix_signal = @prev_ema := (case when `cache_3`.idx = 1 then `cache_3`.temp else `cache_3`.temp * @k + @prev_ema * (1 - @k) end), temp = @prev_ema, 날짜 = 날짜; SELECT trix as trix_{trix_day}_{signal_day}, trix_signal as trix_signal_{trix_day}_{signal_day}, trix-trix_signal as trix_oscillator_{trix_day}_{signal_day}, UNIX_TIMESTAMP(날짜) as `날짜` FROM `cache_3` ORDER BY `날짜` DESC LIMIT 1;",    "Options": {      "trix_day": 12,      "signal_day": 9    },    "ScheduleTime": ""  }]